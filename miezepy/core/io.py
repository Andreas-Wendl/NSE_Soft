#  -*- coding: utf-8 -*-
# *****************************************************************************
# Copyright (c) 2017 by the NSE analysis contributors (see AUTHORS)
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Module authors:
#   Alexander Schober <alex.schober@mac.com>
#
# *****************************************************************************


import sys
import io
import os
import re
import numpy as np

from .io_modules.import_mieze_tof import Import_MIEZE_TOF
from .io_modules.import_sans_pad import Import_SANS_PAD
from .data import Data_Structure

def loadData(env,gui):
    return ''

class IO_Manager:

    def __init__(self, env):

        self.verbose        = True
        self.env            = env
        self.generator      = Generator()
        self.import_objects = []
    
    def addObject(self):

        self.import_objects.append(ImportObject(self))

    def remObject(self, index):
    
        del self.import_objects[index]

    def reset(self):
        
        self.import_objects = []

    def load(self,path, gui = None):
        '''
        The load dispatcher
        '''
        self.reset()
        if path.split(".")[-1] == "py":
            self.loadFromPython(path, gui)
        else:
            self.loadFromText(path)

    def saveToPython(self, path):
        '''
        Save the whole system to a python script
        '''
        script = ""
        indent = 1

        script += "def loadData(env, gui = None):\n"
        script += indent * "    " +"if not gui == None:\n"
        script += (indent+1) * "    " +"for i in range("+str(len(self.import_objects))+"):\n"
        script += (indent+2) * "    " +"gui.addElement()\n"
        script += indent * "    " +"else:\n"
        script += (indent+1) * "    " +"for i in range("+str(len(self.import_objects))+"):\n"
        script += (indent+2) * "    " +"env.io.addObject()\n"

        script += indent * "    " + "import_result  = [None]*"+str(len(self.import_objects))+"\n"

        for i,element in enumerate(self.import_objects):
            script += indent * "    " +"import_result["+str(i)+"] = loadData_"+str(i)+"(env.io.import_objects["+str(i)+"])\n"

        script += indent * "    " + "passed = all([all([subelement[0] for subelement in element]) for element in import_result])\n"
        script += indent * "    " +"if not gui == None:\n"
        script += (indent+1) * "    " +"for i in range("+str(len(self.import_objects))+"):\n"
        script += (indent+2) * "    " +"gui.setCurrentElement(i)\n"
        script += (indent+2) * "    " +"if passed:\n"  
        script += (indent+3) * "    " +"gui.populate()\n"
        script += indent * "    " +"else:\n"
        script += (indent+1) * "    " +"for i in range("+str(len(self.import_objects))+"):\n"  
        script += (indent+2) * "    " +"if passed:\n"  
        script += (indent+3) * "    " +"env.io.import_objects[i].processObject()\n"
        script += indent * "    " +"return import_result\n"

        for i,element in enumerate(self.import_objects):
            script += "\ndef loadData_"+str(i)+"(import_object):\n"
            script += indent * "    " + "#################################\n"
            script += indent * "    " + "########## add element ##########\n"
            script += indent * "    " + "current_object  = import_object\n"
            script += indent * "    " + "meta_files_found = [True,'']\n"
            script += indent * "    " + "data_files_found = [True,'']\n"
            script += element.script(indent)

        f = open(path, 'w')
        f.write(script)
        f.close()

    def loadFromPython(self, path, gui = None):
        '''
        load from a python script generated by 
        the previous self.saveToPython
        '''
        self.reset()
         
        with open(path) as f:
            code = compile(f.read(), path, 'exec')
            exec(code,globals())

        result = loadData(self.env, gui)

        try:
            self.generate()
        except:
            pass

        return result

    def loadFromText(self, path, gui = None):
        '''
        load from a python script generated by 
        the previous self.saveToPython
        '''
        print('I am a text')

    def generate(self):
        '''
        This is the method that will create a data
        structure populate it and then send it's 
        content to the main environment handler.
        '''
        self.env.data[self.env.initial_data_name] = self.generator.generate(self.import_objects)
        self.env.set_current_data(self.env.initial_data_name)

    def load_MIEZE_TOF(self,load_path):
        '''
        This function will manage the load of tof
        files through different smaller import
        components
        '''
        Import_MIEZE_TOF(load_path,self.env.current_data)

    def load_MIEZE_HD5(self,load_path):
        '''
        This function will manage the load of tof
        files through different smaller import
        components
        '''
        pass

    def load_SANS_PAD(self,load_path):
        '''
        This function will import the data from the 
        PAD format. 
        '''
        Import_SANS_PAD(load_path,self.env.current_data)

class Generator:

    def generate(self, import_objects):
        '''
        Main generator function that will manage the 
        import of all the required elements
        '''
        axes,idx    = self.getAxes(import_objects)
        data        = self.populateData(axes, idx, import_objects)
        data        = self.setAxes( data,axes)
        return data

    def getAxes(self, import_objects):
        '''
        compute the axes from all the import objects
        and then stick them together and finally 
        remove repetitions through sets
        '''
        temp_axes = []
        for item in import_objects:
            temp_axes.append(item.getAxes())

        axes = [[] for i in range(len(temp_axes[0]))]
        for i in range(len(temp_axes)):
            for j in range(len(temp_axes[0])):
                axes[j] += temp_axes[i][j]

        for j in range(len(temp_axes[0])):
            axes[j] = list(set(axes[j]))

        idx = [[[]for j in range(len(temp_axes[i][2]))] for i in range(len(temp_axes))]
        for i in range(len(temp_axes)):
            for j in range(len(temp_axes[i][2])):
                idx[i][j] = [
                    axes[0].index(temp_axes[i][0][0]),
                    axes[1].index(temp_axes[i][1][0]),
                    axes[2].index(temp_axes[i][2][j])]

        return axes,idx

    def setAxes(self, data, axes):
        '''
        This routine will grab the axes and put them
        into the datastructure.
        '''
        data.axes.set_name(0, 'Parameter')
        data.axes.set_name(1, 'Measurement')
        data.axes.set_name(2, 'Echo Time')
        data.axes.set_name(3, 'Foil')
        data.axes.set_name(4, 'Time Channel')

        data.axes.set_axis(0, axes[0])
        data.axes.set_axis(1, axes[1])
        data.axes.set_axis(2, axes[2])
        data.axes.set_axis(3, [e for e in range(
            len(data.axes.axes[3]))])
        data.axes.set_axis(4,  [e for e in range(
            len(data.axes.axes[4]))])

        # data.axes.set_name(0, 'Parameter')
        # data.axes.set_name(1, 'Measurement')
        # data.axes.set_name(2, 'Echo time')
        # data.axes.set_name(3, 'Foil')
        # data.axes.set_name(4, 'Time channel')

        return data

    def populateData(self, axes, idx, import_objects):
        '''
        compute the axes from all the import objects
        and then stick them together and finally 
        remove repetitions through sets
        '''
        data_struct = Data_Structure()

        for i,import_object in enumerate(import_objects):
            for j,path in enumerate(import_object.file_handler.total_path_files):
                data_struct.add_metadata_object(self.generateMetadata(import_object, j))

                f = open(path,'rb')
                loadeddata = np.fromfile(f, dtype=np.int32)[:np.prod(import_object.data_handler.dimension)]
                data = loadeddata.reshape(*import_object.data_handler.dimension)
                f.close()
                
                for idx_1 in range(import_object.data_handler.dimension[0]):
                    for idx_2 in range(import_object.data_handler.dimension[1]):
                        address = list(idx[i][j]) + [idx_1,idx_2]
                        data_struct[address] = data[idx_1,idx_2,:,:]

        data_struct.validate()

        data_struct.metadata_class.add_metadata(
            'Selected foils', 
            value = '[1,1,1,0,0,1,1,1]' , 
            logical_type = 'int_array', 
            unit = '-')

        reference = self.getReference(import_objects)
        data_struct.metadata_class.add_metadata(
            'Reference', 
            value = reference, 
            logical_type = 'float', 
            unit = 'K')

        background = self.getBackground(import_objects)
        data_struct.metadata_class.add_metadata(
            'Background', 
            value = str(background) , 
            logical_type = 'float', 
            unit = 'K')

        return data_struct

    def generateMetadata(self,import_object, index):
        '''
        Here is the routine managing the metadata 
        handling.
        '''
        metadata = {}
        for key in import_object.meta_handler.values.keys():
            metadata[key] = [
                key,
                'float',
                import_object.meta_handler.values[key][index],
                '-'
                ]
        return metadata
                
    def getReference(self, import_objects):
        '''
        Grab the reference from the widgets if possible
        '''
        reference = None
        for i,import_object in enumerate(import_objects):
            if import_object.data_handler.reference:
                reference = import_object.data_handler.parameter
        return reference

    def getBackground(self, import_objects):
        '''
        Grab the reference from the widgets if possible
        '''
        background = None
        for i,import_object in enumerate(import_objects):
            if import_object.data_handler.background:
                background = import_object.data_handler.parameter
        return background

class ImportObject:
    
    def __init__(self, parent):

        self.parent         = parent
        self.meta_handler   = MetaHandler()
        self.file_handler   = FileHandler()
        self.data_handler   = DataHandler()

    def processObject(self):
        '''
        This function will be called when the object
        is being process and all parameters are being
        calculated.
        '''
        self.meta_handler.prepareExtract()

        for file in self.file_handler.total_path_files:
            self.meta_handler.extractMeta(file)

        self.meta_handler.finalizeExtract(self.parent.env.fit)

    def script(self, indent):
        '''
        This will generate the script of the current
        object.
        '''
        script = ""

        script += self.meta_handler.script(indent)
        script += self.file_handler.script(indent)
        script += self.data_handler.script(indent)

        return script

    def getAxes(self):
        '''
        '''
        axis = []

        try:
            axis.append([float(self.data_handler.parameter)])
        except:
            axis.append([self.data_handler.parameter])
        try:
            axis.append([float(self.data_handler.meas)])
        except:
            axis.append([self.data_handler.meas])

        if self.meta_handler.values['Echo'] == 'Not given':
            axis.append([i for i in range(len(self.file_handler.total_path_files))])
        else:
            axis.append(self.meta_handler.values['Echo'])

        axis.append([i for i in range(self.data_handler.dimension[0])])
        axis.append([i for i in range(self.data_handler.dimension[1])])
        
        return axis
        
class DataHandler:
    
    def __init__(self):
        self.initialize()

    def initialize(self):
        '''
        This will initialize the different arrays and
        can be used to reset the class.
        '''
        self.dimension = [8,16,128,128]
        self.parameter = 'None'
        self.meas      = 'None'
        self.reference = False
        self.background= False

    def script(self, indent):
        '''
        This will generate the script of the current
        object.
        '''
        script = ""

        script += indent * "    " + "########## The data handler ##########\n"
        script += indent * "    " + "current_object.data_handler.dimension = "+str(self.dimension) + "\n"
        script += indent * "    " + "current_object.data_handler.parameter = '"+str(self.parameter) + "'\n"
        script += indent * "    " + "current_object.data_handler.meas = '"+str(self.meas) + "'\n"
        script += indent * "    " + "current_object.data_handler.reference = "+str(self.reference) + "\n"
        script += indent * "    " + "current_object.data_handler.background = "+str(self.background) + "\n"
        script += indent * "    " + "return [meta_files_found, data_files_found]\n"

        return script

class FileHandler:
    
    def __init__(self):
        self.initialize()

    def initialize(self):
        '''
        This will initialize the different arrays and
        can be used to reset the class.
        '''
        self.total_path_files = []
        self.nice_path_files  = []

    def filesExist(self, file_path_array):
        '''
        Checks if all the files in a path array actually exist
        '''
        return all([os.path.isfile(file_path) for file_path in file_path_array])

    def addFiles(self, file_path_array):
        '''
        This routine will get the file names and try
        to test store them and create a nice 
        representation for the display.
        '''
        for element in file_path_array:
            if not element.split(os.path.sep)[-1] in self.nice_path_files:
                self.total_path_files.append(element)
                self.nice_path_files.append(element.split(os.path.sep)[-1])

    def removeFile(self, index):
        '''
        This routine will get the file names and try
        to test store them and create a nice 
        representation for the display.
        '''
        del self.total_path_files[index]
        del self.nice_path_files[index]

    def genPrev(self, index):
        '''
        Generate a preview of a file
        '''
        target = self.total_path_files[index]

        with open(target) as f:
            loadeddata = np.fromfile(f, dtype=np.int32)[:8*16*128*128]
            data = loadeddata.reshape(8*16,128,128)
            data = np.sum(data, axis=0)

        self.current_preview = np.log10(data+1)

    def getElement(self, index_array):
        '''
        Generate a preview of a file
        '''
        target = self.total_path_files[index_array[0]]

        with open(target) as f:
            loadeddata = np.fromfile(f, dtype=np.int32)[:8*16*128*128]
            data = loadeddata.reshape(8,16,128,128)

        return np.log10(data[index_array[1], index_array[2]]+1)

    def script(self, indent):
        '''
        This will generate the script of the current
        object.
        '''
        common_path = str(os.path.sep).join(os.path.commonprefix(self.total_path_files).split(os.path.sep)[:-1])

        script = ""
        script += indent * "    " + "\n"
        script += indent * "    " + "########## The file paths ##########\n"

        script += (indent+0) * "    " + "common_path = '" + common_path + "'\n"
        script += (indent+0) * "    " + "path_list = [\n"
        for item in self.total_path_files:
            script += (indent+1) * "    " + "'" + str(os.path.sep).join(item.split(common_path)[1].split(os.path.sep)[1:]) + "',\n"

        script = script[:-2]
        script += "]\n"
        script += (indent+0) * "    " + "if current_object.file_handler.filesExist([\n"
        script += (indent+1) * "    " + "os.path.join(common_path,item) for item in path_list]):\n"

        script += (indent+1) * "    " + "current_object.file_handler.addFiles([\n"
        script += (indent+2) * "    " + "os.path.join(common_path,item) for item in path_list])\n"
        script += indent * "    " + "else:\n"
        script += (indent+1) * "    " + "data_files_found = [False,common_path]\n"
        return script

class MetaHandler:
    
    def __init__(self):
        self.path = ''
        self.selected_meta = []

    def script(self, indent):
        '''
        This will generate the script of the current
        object.
        '''
        script = ""
        script += indent * "    " + "\n"
        script += indent * "    " + "########## The meta info ##########\n"
        script += indent * "    " + "try:\n"
        script += (indent+1) * "    " + "path = '"+self.path+"'\n"
        script += (indent+1) * "    " + "current_object.meta_handler.buildMeta(path)\n"
        script += (indent+1) * "    " + "selected_meta = ["
        for element in self.selected_meta:
            script += "\n"+ (indent+2) * "    " + "["
            for item in element:
                script += "'"+item +"' ,"
            script = script [:-1]
            script += "],"
        script = script [:-1]
        script += "]\n"
        script += (indent+1) * "    " + "current_object.meta_handler.selected_meta = selected_meta\n"
        script += indent * "    " + "except:\n"
        script += (indent+1) * "    " + "meta_files_found = [False,path]\n"
        return script

    def buildMeta(self, file_path):
        '''
        Create a list of the available metadata in the
        file and then 
        '''
        self.path = file_path
        self.metadata_temp  = []
        f                   = open(file_path,'rb')
        line                = f.readlines()
        
        for binaryLine in line:

            try:
                line = binaryLine.decode('ascii').replace('\n','')
                nums = re.findall('-?\d*\.?\d+',line.split(" : ")[1])

                if len(nums) == 0:
                    pass

                else:
                    self.metadata_temp.append([
                        False,
                        line.split(" : ")[0].replace(" ", ""),
                        line.split(" : ")[1].split(nums[len(nums) - 1])[1].replace(" ","").replace(")","")])
            except:
                pass

        f.close()

    def flipBool(self, name, value):
        '''
        This method will flip a boolean value when 
        selected
        '''
        for element in self.metadata_temp:
            if element[1] == name:
                element[0] = value
                break

    def setMeta(self):
        '''
        This will retrieve the set metadata information
        '''
        self.selected_meta = []

        for element in self.metadata_temp:
            if element[0]:
                self.selected_meta.append(element[1:3]+['None', '1'])
        
    def checkPresence(self):
        '''
        This will retrieve the set metadata information
        '''
        for element in self.selected_meta:
            for item in self.metadata_temp:
                if element[0] == item[1]:
                    item[0] = True

    def removeElement(self, row):
        '''
        reset the output 
        '''
        try:
            del self.metadata_temp[row]
            del self.selected_meta[row]
        except:
            pass

    def reset(self):
        '''
        reset the output 
        '''
        self.selected_meta = []

    def editValue(self, array):
        '''
        Edit the value or definition of an element
        '''
        for i in range(len(self.selected_meta)):
            if self.selected_meta[i][0] == array[0]:
                self.selected_meta[i] = list(array)
                break

    def prepareExtract(self):
        '''
        Preates the metadata dictionary for the file
        '''
        self.values = {}
        self.values_set = {}

        for element in self.selected_meta:
            self.values[element[0]]     = []

    def extractMeta(self,file_path):
        '''
        '''
        f           = open(file_path,'rb')
        line        = f.readlines()
        for element in self.selected_meta:
            self.values_set[element[0]] = False

        for binaryLine in line:
            try:
                line = binaryLine.decode('ascii').replace('\n','')
                nums = re.findall('[-+]?(\d+([.,]\d*)?)([eE][-+]?\d+)?',line.split(" : ")[1])
                if len(nums) == 0:
                    pass
                else:
                    marker = line.split(" : ")[0].replace(" ", "")

                    for element in self.selected_meta:
                        if element[0] == marker and not self.values_set[element[0]]:
                            self.values[element[0]].append(
                                nums[0][0] + nums[0][-1])
                            self.values_set[element[0]] = True
            except:
                pass

    def finalizeExtract(self, fit_handler):
        '''
        Preates the metadata dictionary for the file
        '''
        self.values['Parameter']    = ['Not given']
        self.values['Measurement']  = ['Not given']
        self.values['Echo']         = ['Not given']

        for element in self.selected_meta:
            if element[2] == 'Parameter':
                self.values['Parameter'] = str(np.mean([
                    float(e)*float(element[3])  for e in self.values[element[0]]]))
            elif element[2] == 'Measurement':
                self.values['Measurement'] = str(np.mean([
                    float(e)*float(element[3])  for e in self.values[element[0]]]))
            elif element[2] == 'Echo':
                self.values['Echo'] = [
                    float(e)*float(element[3])  for e in self.values[element[0]]]
            elif element[2] == 'Wavelength':
                    self.values['Wavelength'] = [
                    float(e)*float(element[3]) for e in self.values[element[0]]]
            elif element[2] == 'Freq. second':
                    self.values['Freq. second'] = [
                    float(e)*float(element[3])  for e in self.values[element[0]]]
            elif element[2] == 'Freq. first':
                    self.values['Freq. first'] = [
                    float(e)*float(element[3])  for e in self.values[element[0]]]
            elif element[2] == 'lsd':
                    self.values['lsd'] = [
                    float(e)*float(element[3])  for e in self.values[element[0]]]
            elif element[2] == 'Monitor':
                    self.values['Monitor'] = [
                    float(e)*float(element[3])  for e in self.values[element[0]]]

        if all([(element in self.values.keys()) for element in [
            'Freq. first','Freq. second','Wavelength','lsd']]) and self.values['Echo'][0] == 'Not given':

            self.values['Echo'] = [0]*len(self.values['Wavelength'])

            for i in range(len(self.values['Wavelength'])):
                self.values['Echo'][i],val = fit_handler.mieze_tau_calc(
                    float(self.values['Wavelength'][i]),
                    float(self.values['Freq. first'][i]),
                    float(self.values['Freq. second'][i]),
                    float(self.values['lsd'][i])
                )
                del val

        if self.values['Parameter'][0] == 'Not given':
            del self.values['Parameter']
        if self.values['Measurement'][0] == 'Not given':
            del self.values['Measurement']
        if self.values['Echo'][0] == 'Not given':
            del self.values['Echo']
